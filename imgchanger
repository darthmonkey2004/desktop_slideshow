#!/usr/bin/env python3

from threading import Thread
from random import shuffle, randint
import time
import subprocess
import os

class img_changer():
	def __init__(self, wait=30, path=None):
		if path is None:
			self.path = os.path.join(os.path.expanduser("~"), 'Pictures', 'Wallpapers')
		self.path = path
		print(f"path:{self.path}")
		self.files = self.get_files(self.path)
		self.wait = wait
		self.runloop = True

	def set_background(self):
		#com = f"sudo gsettings get org.gnome.desktop.background picture-uri \"file://{filepath}\""
		#com = f"sudo gsettings set org.gnome.desktop.background picture-uri \"file:///{filepath}\""
		filepath = self.get_img()
		com = f"gsettings set org.gnome.desktop.background picture-uri \"file:///{filepath}\""
		ret = subprocess.check_output(com, shell=True)
	def get_img(self):
		shuffle(self.files)
		shuffle(self.files)
		shuffle(self.files)
		return self.files[randint(0, len(self.files) - 1)]
	def get_files(self, path=None):
		if self.path is not None:
			self.path = path
		com = f"find \"{self.path}\" -name \"*.*\""
		try:
			files = subprocess.check_output(com, shell=True).decode().strip().split("\n")
		except Exception as e:
			files = []
		if files == []:
			print(f"No files found at {self.path}! Please move all desktop images to this directory and restart. Exiting...")
			exit()
		return files
	def run(self):
		self.t = Thread(target=self.loop)
		self.t.setDaemon(True)
		self.t.start()
	def loop(self):
		while self.runloop:
			self.set_background()
			time.sleep(self.wait)
		exit()


if __name__ == "__main__":
	import sys
	try:
		path = sys.argv[1]
	except:
		path = os.path.join(os.path.expanduser("~"), 'Pictures', 'Wallpapers')
	if not os.path.exists(path):
		print(f"Path doesn't exist: {path}!")
		yn = input("Create? (y/n)")
		if yn == 'y':
			os.makedirs(path, exist_ok=True)
			print(f"directory created at {path}! Please move all desktop wallpaper images to this directory and re-run!")
			exit()
		else:
			print("exiting...")
			exit()
	c = img_changer(path=path)
	c.loop()
